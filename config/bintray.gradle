apply plugin: "com.jfrog.bintray"
apply plugin: "maven-publish"

def isAndroidLibrary = project.hasProperty("android")
version = libraryVersion

if (isAndroidLibrary) { // Android libraries
    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ["archives"]
    publications = ["releasePub"]
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing"
            }
        }
    }
}

// Maven block
group = publishedGroupId

def pomConfig = {
    licenses {
        license {
            name licenseName
            url licenseUrl
        }
    }
    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }

    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
}

publishing {
    publications {
        releasePub(MavenPublication) {
            if (!isAndroidLibrary) {
                from components.java
            } else {
                from publishingComponent
            }
            artifact sourcesJar
            artifact javadocJar
            groupId publishedGroupId
            artifactId artifactName
            version libraryVersion

            pom.withXml {
                def root = asNode()
                root.appendNode("name", libraryName)
                root.appendNode("description", libraryDescription)
                root.appendNode("url", siteUrl)
                root.children().last() + pomConfig

                if (isAndroidLibrary) {
                    def dependenciesNode = asNode().getAt("dependencies")[0] ?: asNode().appendNode("dependencies")
                    // Iterate over the implementation dependencies (we don"t want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != "unspecified") {
                            def dependencyNode = dependenciesNode.appendNode("dependency")
                            dependencyNode.appendNode("groupId", it.group)
                            dependencyNode.appendNode("artifactId", it.name)
                            dependencyNode.appendNode("version", it.version)
                        }
                    }
                }
            }
        }
    }
}
